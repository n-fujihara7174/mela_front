{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/user/UserEdit.vue?vue&type=style&index=0&id=bb9f82b0&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/user/UserEdit.vue","mtime":1646404887849},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJ1dHRvbiB7CiAgd2lkdGg6IDE1MHB4OwogIG1hcmdpbi10b3A6IDMwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTAwcHg7CiAgbWFyZ2luLXJpZ2h0OiA1MHB4Owp9CgoudGFibGUgdGggewogIHdpZHRoOiAxNSU7CiAgcGFkZGluZzogMTBweCA0MHB4OwogIGJvcmRlci1zdHlsZTogbm9uZTsKfQoKLnRhYmxlIHRkIHsKICBib3JkZXItc3R5bGU6IG5vbmU7Cn0KCi5iaXJ0aGRheS1mb3JtIHsKICB3aWR0aDogMTYwcHg7CiAgcGFkZGluZzogNnB4IDEycHg7Cn0KCi5iaXJ0aGRheS1mb3JtIGlucHV0IHsKICBib3JkZXI6IG5vbmU7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi5pbnB1dC15ZWFyIHsKICB3aWR0aDogNTBweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLmlucHV0LW1vbnRoIHsKICB3aWR0aDogMjVweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLmlucHV0LWRheSB7CiAgd2lkdGg6IDI1cHg7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0K"},{"version":3,"sources":["/app/app/src/components/adminPage/user/UserEdit.vue"],"names":[],"mappings":";AA2jBA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB","file":"/app/app/src/components/adminPage/user/UserEdit.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"input-form mx-xl-5\">\n    <div class=\"mt-4\">\n      <a href=\"#\" @click=\"transitionList\">ユーザー 一覧画面</a>\n      <span v-if=\"!refState.isUpdate\"> > ユーザー 登録画面</span>\n      <span v-if=\"refState.isUpdate\"> > ユーザー 編集画面</span>\n    </div>\n    <div class=\"mt-5\">\n      <h2 v-if=\"!refState.isUpdate\">ユーザー 登録画面</h2>\n      <h2 v-if=\"refState.isUpdate\">ユーザー 編集画面</h2>\n      <table class=\"table table-sm shadow table-hover mt-5\">\n        <tbody>\n          <tr :class=\"{ 'display-none': !refState.isUpdate }\">\n            <th>No</th>\n            <td class=\"align-middle\">{{ refState.user.id }}</td>\n          </tr>\n          <tr>\n            <th>ユーザー名</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.user_name\"\n                :errorMessage=\"refState.error_message.user_name\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>ユーザーID</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.user_id\"\n                :errorMessage=\"refState.error_message.user_id\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>メールアドレス</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.email\"\n                :errorMessage=\"refState.error_message.email\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>電話番号</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.phone_number\"\n                :errorMessage=\"refState.error_message.phone_number\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>生年月日</th>\n            <td>\n              <div\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.birthday) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.birthday) &&\n                    refState.isNotInit,\n                }\"\n                class=\"birthday-form form-control\"\n              >\n                <input\n                  type=\"tel\"\n                  maxlength=\"4\"\n                  class=\"input-year\"\n                  placeholder=\"1990\"\n                  @input=\"checkInputYear\"\n                  v-model=\"refState.birthday.year\"\n                />/\n                <input\n                  type=\"tel\"\n                  maxlength=\"2\"\n                  class=\"input-month\"\n                  placeholder=\"01\"\n                  @input=\"checkInputMonth\"\n                  v-model=\"refState.birthday.month\"\n                />/\n                <input\n                  type=\"tel\"\n                  maxlength=\"2\"\n                  class=\"input-day\"\n                  placeholder=\"01\"\n                  @input=\"checkInputDay\"\n                  v-model=\"refState.birthday.day\"\n                />\n              </div>\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(refState.error_message.birthday),\n                  'is-valid': !isInvalid(refState.error_message.birthday),\n                  'is-invalid': isInvalid(refState.error_message.birthday),\n                }\"\n                >{{ refState.error_message.birthday }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>画像</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.image\"\n                :errorMessage=\"refState.error_message.image\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>自己紹介</th>\n            <td>\n              <InputField\n                v-model:value=\"refState.user.self_introduction\"\n                :errorMessage=\"refState.error_message.self_introduction\"\n                :type=\"'textarea'\"\n              ></InputField>\n            </td>\n          </tr>\n          <tr>\n            <th>いいね通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_like_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>コメント通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_comment_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>メッセージ通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_message_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>カレンダー通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_calender_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>削除</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.is_delete\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>登録日</th>\n            <td class=\"align-middle\">{{ refState.user.created_at }}</td>\n          </tr>\n          <tr>\n            <th>前回更新日</th>\n            <td class=\"align-middle\">{{ refState.user.updated_at }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"createUser\"\n        v-if=\"!refState.isUpdate\"\n      >\n        登録\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"updateUser\"\n        v-if=\"refState.isUpdate\"\n      >\n        更新\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"transitionList\"\n      >\n        キャンセル\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\n\nimport { defineComponent, reactive } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { User } from \"@/types/User\";\nimport {\n  lengthCheck,\n  requireCheck,\n  checkDateFormat,\n  checkDateValue,\n} from \"@/composables/validationCheck\";\nimport InputField from \"@/components/adminPage/common/molecules/InputField.vue\";\n\n/* ***********************************************************************************\nエラーメッセージを格納するオブジェクトの型を定義\n*********************************************************************************** */\ninterface ErrorMessage {\n  user_name: string;\n  user_id: string;\n  email: string;\n  phone_number: string;\n  birthday: string;\n  image: string;\n  self_introduction: string;\n}\n\n/* ***********************************************************************************\n生年月日を入力するテキストボックス用のオブジェクトを定義\n*********************************************************************************** */\ninterface Birthday {\n  year: string;\n  month: string;\n  day: string;\n}\n\n/* ***********************************************************************************\nモジュール全体で使うオブジェクトの定義\n*********************************************************************************** */\ninterface State {\n  user: User;\n  birthday: Birthday;\n  error_message: ErrorMessage;\n  isUpdate: boolean;\n  isNotInit: boolean;\n}\n\nexport default defineComponent({\n  /* ***********************************************************************************\n  コンポーネント読み込み\n  *********************************************************************************** */\n  components: {\n    InputField: InputField,\n  },\n\n  /* ***********************************************************************************\n  コンポーネントの引数を設定\n  *********************************************************************************** */\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    /* ***********************************************************************************\n    コンポーネント全体で使用する変数の定義\n    *********************************************************************************** */\n    const router = useRouter();\n\n    const initErrorMessage: ErrorMessage = {\n      user_name: \"\",\n      user_id: \"\",\n      email: \"\",\n      phone_number: \"\",\n      birthday: \"\",\n      image: \"\",\n      self_introduction: \"\",\n    };\n\n    const refState = reactive<State>({\n      user: {\n        id: 0,\n        user_name: \"\",\n        user_id: \"\",\n        self_introduction: \"\",\n        email: \"\",\n        phone_number: 0,\n        birthday: \"\",\n        image: \"\",\n        can_like_notification: false,\n        can_comment_notification: false,\n        can_message_notification: false,\n        can_calender_notification: false,\n        is_delete: false,\n        created_at: \"\",\n        updated_at: \"\",\n      },\n      birthday: {\n        year: \"\",\n        month: \"\",\n        day: \"\",\n      },\n      error_message: {\n        user_name: \"\",\n        user_id: \"\",\n        email: \"\",\n        phone_number: \"\",\n        birthday: \"\",\n        image: \"\",\n        self_introduction: \"\",\n      },\n      isUpdate: false,\n      isNotInit: false,\n    });\n\n    /* ***********************************************************************************\n    一覧画面で選択されたユーザー情報を取得\n    *********************************************************************************** */\n    const getUserById = () => {\n      const oReq = new XMLHttpRequest();\n      oReq.open(\n        \"GET\",\n        \"http://localhost:3000/users/\" + props.id.toString(),\n        false\n      );\n      oReq.send();\n      return JSON.parse(oReq.response);\n    };\n\n    //登録日付、更新日付をフォーマット\n    const formatDate = (strDate: string) => {\n      return dayjs(strDate).format(\"YYYY/MM/DD hh:mm:ss\");\n    };\n\n    //テキストを年、月、日を分割する\n    const splitBirthday = () => {\n      const aryBirthday = refState.user.birthday.split(\"/\");\n      refState.birthday.year = aryBirthday[0];\n      refState.birthday.month = aryBirthday[1];\n      refState.birthday.day = aryBirthday[2];\n    };\n\n    const setUser = () => {\n      const user = getUserById();\n      refState.user = user[0];\n      refState.user.created_at = formatDate(refState.user.created_at);\n      refState.user.updated_at = formatDate(refState.user.updated_at);\n      refState.user.birthday = dayjs(refState.user.birthday).format(\n        \"YYYY/MM/DD\"\n      );\n      //誕生日を分割する\n      splitBirthday();\n    };\n\n    setUser();\n\n    /* ***********************************************************************************\n    ユーザー情報の登録・更新処理\n    *********************************************************************************** */\n    //ユーザー新規登録\n    const createUser = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      //生年月日入力欄の値をマージする\n      mergeBirthday();\n\n      if (frontValidationCheck()) {\n        await axios\n          .post(\"http://localhost:3000/users/\", {\n            user: refState.user,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            refState.error_message = error.response.data;\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    //ユーザー更新\n    const updateUser = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      //生年月日入力欄の値をマージする\n      mergeBirthday();\n\n      if (frontValidationCheck()) {\n        //更新処理をapiに投げる\n        await axios\n          .patch(\"http://localhost:3000/users/\" + props.id, {\n            user: refState.user,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionList();\n          })\n          .catch((error) => {\n            refState.error_message = error.response.data;\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    /* ***********************************************************************************\n    生年月日情報を操作\n    *********************************************************************************** */\n    //テキストボックスに入力された年、月、日をマージする\n    const mergeBirthday = () => {\n      const year = escape(refState.birthday.year);\n      const month = escape(refState.birthday.month);\n      const day = escape(refState.birthday.day);\n      refState.user.birthday = year + \"/\" + month + \"/\" + day;\n    };\n\n    /* ***********************************************************************************\n    登録日、更新日をフォーマット\n    *********************************************************************************** */\n\n    /* ***********************************************************************************\n    生年月日に入力された文字が数字かどうかチェックし、数字以外であれば入力できないようにする\n    *********************************************************************************** */\n    const checkInputYear = () => {\n      refState.birthday.year = replaceStringToEmpty(refState.birthday.year);\n    };\n\n    const checkInputMonth = () => {\n      refState.birthday.month = replaceStringToEmpty(refState.birthday.month);\n    };\n\n    const checkInputDay = () => {\n      refState.birthday.day = replaceStringToEmpty(refState.birthday.day);\n    };\n\n    const replaceStringToEmpty = (checkTarget: string) => {\n      const regex = new RegExp(\"[^0-9]\");\n      return checkTarget.replace(regex, \"\");\n    };\n\n    /* ***********************************************************************************\n    一覧画面に遷移\n    *********************************************************************************** */\n    const transitionList = () => {\n      router.push({\n        name: \"UserList\",\n      });\n    };\n\n    /* ***********************************************************************************\n    フロント側のバリデーションチェック\n    *********************************************************************************** */\n    const frontValidationCheck = (): boolean => {\n      const assignValue = (str1: string, str2: string): string => {\n        if (str1 == \"\") {\n          return str2;\n        } else {\n          return str1;\n        }\n      };\n\n      refState.error_message.user_name = assignValue(\n        lengthCheck(refState.user.user_name, 45),\n        requireCheck(refState.user.user_name)\n      );\n\n      refState.error_message.user_id = assignValue(\n        lengthCheck(refState.user.user_id, 45),\n        requireCheck(refState.user.user_id)\n      );\n\n      refState.error_message.email = assignValue(\n        lengthCheck(refState.user.email, 45),\n        requireCheck(refState.user.email)\n      );\n\n      refState.error_message.phone_number = assignValue(\n        lengthCheck(refState.user.phone_number.toString(), 45),\n        requireCheck(refState.user.phone_number.toString())\n      );\n\n      refState.error_message.birthday = checkDateFormat(refState.user.birthday);\n      if (!refState.error_message.birthday) {\n        refState.error_message.birthday = checkDateValue(\n          refState.user.birthday\n        );\n      }\n      refState.error_message.birthday = assignValue(\n        refState.error_message.birthday,\n        requireCheck(refState.user.birthday.toString())\n      );\n\n      refState.error_message.image = lengthCheck(refState.user.email, 1000);\n      refState.error_message.self_introduction = lengthCheck(\n        refState.user.self_introduction,\n        120\n      );\n\n      refState.isNotInit = true;\n\n      return !(\n        !!refState.error_message.user_name ||\n        !!refState.error_message.user_id ||\n        !!refState.error_message.email ||\n        !!refState.error_message.phone_number ||\n        !!refState.error_message.birthday ||\n        !!refState.error_message.image ||\n        !!refState.error_message.self_introduction\n      );\n    };\n\n    /* ***********************************************************************************\n    画面に表示するかどうか判定\n    *********************************************************************************** */\n    const judgeDisplay = (displayText: string) => {\n      const isDisplay = !!displayText;\n      return !isDisplay;\n    };\n\n    /* ***********************************************************************************\n    入力値がエラーかどうか判定\n    *********************************************************************************** */\n    const isInvalid = (errorMesssage: string) => {\n      return !!errorMesssage;\n    };\n\n    return {\n      refState,\n      judgeDisplay,\n      isInvalid,\n      transitionList,\n      createUser,\n      updateUser,\n      checkInputYear,\n      checkInputMonth,\n      checkInputDay,\n    };\n  },\n});\n</script>\n\n<style scoped>\nbutton {\n  width: 150px;\n  margin-top: 30px;\n  margin-bottom: 100px;\n  margin-right: 50px;\n}\n\n.table th {\n  width: 15%;\n  padding: 10px 40px;\n  border-style: none;\n}\n\n.table td {\n  border-style: none;\n}\n\n.birthday-form {\n  width: 160px;\n  padding: 6px 12px;\n}\n\n.birthday-form input {\n  border: none;\n  text-align: right;\n}\n\n.input-year {\n  width: 50px;\n  text-align: right;\n}\n\n.input-month {\n  width: 25px;\n  text-align: right;\n}\n\n.input-day {\n  width: 25px;\n  text-align: right;\n}\n</style>\n"]}]}