{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/user/UserDetail.vue?vue&type=style&index=0&id=64adc3ef&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/user/UserDetail.vue","mtime":1641740080771},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50YWJsZSB0aCB7CiAgd2lkdGg6IDE1JTsKICBwYWRkaW5nOiAxMHB4IDQwcHg7CiAgYm9yZGVyLXN0eWxlOiBub25lOwp9CgoudGFibGUgdGQgewogIGJvcmRlci1zdHlsZTogbm9uZTsKfQo="},{"version":3,"sources":["/app/app/src/components/adminPage/user/UserDetail.vue"],"names":[],"mappings":";AAygBA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB","file":"/app/app/src/components/adminPage/user/UserDetail.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"mx-xl-5\">\n    <div class=\"mt-4\">\n      <a href=\"#\" @click=\"transitionList\">ユーザー一覧画面</a>\n      <span> > 詳細画面</span>\n    </div>\n    <div class=\"mt-5\">\n      <h2>詳細画面</h2>\n      <table class=\"table table-sm shadow table-hover mt-5\">\n        <tbody>\n          <tr :class=\"{ 'display-none': !refState.isUpdate }\">\n            <th>No</th>\n            <td class=\"align-middle\">{{ refState.user.id }}</td>\n          </tr>\n          <tr>\n            <th>ユーザー名</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.user_name[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.user_name[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.user_name\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.user_name[0]\n                  ),\n                  'is-valid': !isInvalid(refState.error_message.user_name[0]),\n                  'is-invalid': isInvalid(refState.error_message.user_name[0]),\n                }\"\n                >{{ refState.error_message.user_name[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>ユーザーID</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.user_id[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.user_id[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.user_id\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.user_id[0]\n                  ),\n                  'is-valid': !isInvalid(refState.error_message.user_id[0]),\n                  'is-invalid': isInvalid(refState.error_message.user_id[0]),\n                }\"\n                >{{ refState.error_message.user_id[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>メールアドレス</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.email[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.email[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.email\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.phone_number[0]\n                  ),\n                  'is-valid': !isInvalid(refState.error_message.email[0]),\n                  'is-invalid': isInvalid(refState.error_message.email[0]),\n                }\"\n                >{{ refState.error_message.email[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>電話番号</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.phone_number[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.phone_number[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.phone_number\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.phone_number[0]\n                  ),\n                  'is-valid': !isInvalid(\n                    refState.error_message.phone_number[0]\n                  ),\n                  'is-invalid': isInvalid(\n                    refState.error_message.phone_number[0]\n                  ),\n                }\"\n                class=\"invalid-feedback\"\n                >{{ refState.error_message.phone_number[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>生年月日</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.birthday[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.birthday[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.birthday\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.birthday[0]\n                  ),\n                  'is-valid': !isInvalid(refState.error_message.birthday[0]),\n                  'is-invalid': isInvalid(refState.error_message.birthday[0]),\n                }\"\n                class=\"invalid-feedback\"\n                >{{ refState.error_message.birthday[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>画像</th>\n            <td>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.image[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.image[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.image\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(refState.error_message.image[0]),\n                  'is-valid': !isInvalid(refState.error_message.image[0]),\n                  'is-invalid': isInvalid(refState.error_message.image[0]),\n                }\"\n                class=\"invalid-feedback\"\n                >{{ refState.error_message.image[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>自己紹介</th>\n            <td>\n              <textarea\n                type=\"text\"\n                class=\"form-control\"\n                :class=\"{\n                  'is-valid-textbox':\n                    !isInvalid(refState.error_message.self_introduction[0]) &&\n                    refState.isNotInit,\n                  'is-invalid-textbox':\n                    isInvalid(refState.error_message.self_introduction[0]) &&\n                    refState.isNotInit,\n                }\"\n                v-model=\"refState.user.self_introduction\"\n              />\n              <label\n                :class=\"{\n                  'display-none': judgeDisplay(\n                    refState.error_message.self_introduction[0]\n                  ),\n                  'is-valid': !isInvalid(\n                    refState.error_message.self_introduction[0]\n                  ),\n                  'is-invalid': isInvalid(\n                    refState.error_message.self_introduction[0]\n                  ),\n                }\"\n                class=\"invalid-feedback\"\n                >{{ refState.error_message.self_introduction[0] }}</label\n              >\n            </td>\n          </tr>\n          <tr>\n            <th>いいね通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_like_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>コメント通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_comment_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>メッセージ通知</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.can_message_notification\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>削除</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.user.is_delete\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th>登録日</th>\n            <td class=\"align-middle\">{{ refState.user.created_at }}</td>\n          </tr>\n          <tr>\n            <th>前回更新日</th>\n            <td class=\"align-middle\">{{ refState.user.updated_at }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button @click=\"postUser\">テスト</button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport axios from \"axios\";\nimport { User } from \"@/types/User\";\nimport { lengthCheck, requireCheck } from \"@/composables/validationCheck\";\n\ninterface UserExtend extends User {\n  post_count: number;\n  like_count: number;\n  follow_count: number;\n  follower_count: number;\n  message_user_count: number;\n}\n\ninterface ErrorMessage {\n  user_name: string;\n  user_id: string;\n  password_digest: string;\n  email: string;\n  phone_number: string;\n  birthday: string;\n  image: string;\n  self_introduction: string;\n}\n\ninterface State {\n  user: UserExtend;\n  error_message: ErrorMessage;\n  isUpdate: boolean;\n  isNotInit: boolean;\n}\n\nexport default defineComponent({\n  props: {\n    id: {\n      type: String,\n      default: \"\",\n    },\n  },\n\n  setup(props) {\n    const router = useRouter();\n\n    const initErrorMessage: ErrorMessage = {\n      user_name: \"\",\n      user_id: \"\",\n      password_digest: \"\",\n      email: \"\",\n      phone_number: \"\",\n      birthday: \"\",\n      image: \"\",\n      self_introduction: \"\",\n    };\n\n    const refState = reactive<State>({\n      user: {\n        post_count: 0,\n        like_count: 0,\n        follow_count: 0,\n        follower_count: 0,\n        message_user_count: 0,\n        id: 0,\n        user_name: \"\",\n        user_id: \"\",\n        password: \"\",\n        self_introduction: \"\",\n        email: \"\",\n        phone_number: 0,\n        birthday: new Date(),\n        image: \"\",\n        can_like_notification: false,\n        can_comment_notification: false,\n        can_message_notification: false,\n        can_calender_notification: false,\n        is_delete: false,\n        created_at: new Date(),\n        updated_at: new Date(),\n      },\n      error_message: {\n        user_name: \"\",\n        user_id: \"\",\n        password_digest: \"\",\n        email: \"\",\n        phone_number: \"\",\n        birthday: \"\",\n        image: \"\",\n        self_introduction: \"\",\n      },\n      isUpdate: false,\n      isNotInit: false,\n    });\n\n    //ユーザー情報取得\n    onMounted(async () => {\n      const result = await axios.get(\"http://localhost:3000/users/\" + props.id);\n      refState.user = result.data[0];\n      refState.isUpdate = Boolean(refState.user.id);\n      console.log(refState.isUpdate);\n    });\n\n    //ユーザー新規登録\n    const createUser = async () => {\n      await axios\n        .post(\"http://localhost:3000/users/\", {\n          user: refState.user,\n        })\n        .then((response) => {\n          console.log(\"create\");\n          console.log(response);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n\n    //ユーザー更新\n    const updateUser = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n      //if (frontValidationCheck(refState.user)) {\n        //更新処理をapiに投げる\n        await axios\n          .patch(\"http://localhost:3000/users/\" + props.id, {\n            user: refState.user,\n          })\n          .then((response) => {\n            //一覧画面に遷移\n            transitionList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            Object.assign(\n              refState.error_message,\n              reactive(error.response.data)\n            );\n            refState.isNotInit = true;\n            console.log(refState.error_message);\n          });\n      //}\n    };\n\n    //ユーザー登録・更新処理\n    const postUser = () => {\n      if (props.id == \"0\") {\n        createUser();\n      } else {\n        updateUser();\n      }\n    };\n\n    const transitionList = () => {\n      router.push({\n        name: \"UserList\",\n      });\n    };\n\n    const frontValidationCheck = (userObject: UserExtend): boolean => {\n      let valid = true;\n\n      //ユーザー名チェック\n      refState.error_message.user_name = requireCheck(userObject.user_name);\n      refState.error_message.user_name = lengthCheck(userObject.user_name, 45);\n      valid = !!refState.error_message.user_name;\n\n      //ユーザーIDチェック\n      refState.error_message.user_id = requireCheck(userObject.user_id);\n      refState.error_message.user_id = lengthCheck(userObject.user_id, 45);\n      valid = !!refState.error_message.user_id;\n\n      //メールアドレスチェック\n      refState.error_message.email = requireCheck(userObject.email);\n      refState.error_message.email = lengthCheck(userObject.email, 256);\n      valid = !!refState.error_message.email;\n\n      //電話番号チェック\n      refState.error_message.phone_number = requireCheck(\n        userObject.phone_number.toString()\n      );\n      refState.error_message.phone_number = lengthCheck(\n        userObject.phone_number.toString(),\n        11\n      );\n      valid = !!refState.error_message.phone_number;\n\n      //自己紹介チェック\n      refState.error_message.user_name = lengthCheck(\n        userObject.self_introduction,\n        120\n      );\n\n      return valid;\n    };\n\n    const judgeFlag = (flag: boolean) => {\n      if (flag) {\n        return \"通知を行う\";\n      } else {\n        return \"\";\n      }\n    };\n\n    const judgeDelete = (flag: boolean) => {\n      if (flag) {\n        return \"削除\";\n      } else {\n        return \"\";\n      }\n    };\n\n    const judgeDisplay = (displayText: string) => {\n      const isDisplay = !!displayText;\n      console.log(displayText);\n      console.log(isDisplay);\n      return !isDisplay;\n    };\n\n    const isInvalid = (errorMesssage: string) => {\n      return !!errorMesssage;\n    };\n\n    return {\n      refState,\n      judgeFlag,\n      postUser,\n      judgeDisplay,\n      isInvalid,\n      transitionList,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.table th {\n  width: 15%;\n  padding: 10px 40px;\n  border-style: none;\n}\n\n.table td {\n  border-style: none;\n}\n</style>\n"]}]}