{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/post/PostEdit.vue?vue&type=style&index=0&id=40d4dbc8&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/post/PostEdit.vue","mtime":1644144447942},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJ1dHRvbiB7CiAgd2lkdGg6IDE1MHB4OwogIG1hcmdpbi10b3A6IDMwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTAwcHg7CiAgbWFyZ2luLXJpZ2h0OiA1MHB4Owp9CgoudGFibGUgdGggewogIHdpZHRoOiAxNSU7CiAgcGFkZGluZzogMTBweCA0MHB4OwogIGJvcmRlci1zdHlsZTogbm9uZTsKfQoKLnRhYmxlIHRkIHsKICBib3JkZXItc3R5bGU6IG5vbmU7Cn0KCi5iaXJ0aGRheS1mb3JtIHsKICB3aWR0aDogMTYwcHg7CiAgcGFkZGluZzogNnB4IDEycHg7Cn0KCi5iaXJ0aGRheS1mb3JtIGlucHV0IHsKICBib3JkZXI6IG5vbmU7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi5pbnB1dC15ZWFyIHsKICB3aWR0aDogNTBweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLmlucHV0LW1vbnRoIHsKICB3aWR0aDogMjVweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLmlucHV0LWRheSB7CiAgd2lkdGg6IDI1cHg7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi5pbmxpbmUgewogIGRpc3BsYXk6IGlubGluZTsKfQo="},{"version":3,"sources":["/app/app/src/components/adminPage/post/PostEdit.vue"],"names":[],"mappings":";AAuXA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB","file":"/app/app/src/components/adminPage/post/PostEdit.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"input-form mx-xl-5\">\n    <div class=\"mt-4\">\n      <a href=\"#\" @click=\"transitionPostList\">投稿一覧画面</a>\n      <span v-if=\"!refState.isUpdate\"> > 投稿 登録画面</span>\n      <span v-if=\"refState.isUpdate\"> > 投稿 編集画面</span>\n    </div>\n    <div class=\"mt-5\">\n      <h2 v-if=\"!refState.isUpdate\">投稿 登録画面</h2>\n      <h2 v-if=\"refState.isUpdate\">投稿 編集画面</h2>\n\n      <table class=\"table table-sm shadow table-hover mt-5\">\n        <tbody>\n          <tr :class=\"{ 'display-none': !refState.isUpdate }\">\n            <th>No</th>\n            <td class=\"align-middle\">{{ refState.post.id }}</td>\n          </tr>\n          <tr>\n            <th>ユーザーID</th>\n            <td>\n              <SuggestInput\n                v-model:value=\"refState.post.unique_user_id\"\n                :list=\"userIdList\"\n                :placeholder=\"'ユーザー名を入力してください'\"\n                :errorMessage=\"refState.error_message.user\"\n                :isNotInit=\"refState.isNotInit\"\n              ></SuggestInput>\n              <ErrorMessageLabel\n                v-model:errorMessage=\"refState.error_message.user\"\n              ></ErrorMessageLabel>\n            </td>\n          </tr>\n          <tr>\n            <th>内容</th>\n            <td>\n              <InputColumn\n                v-model:value=\"refState.post.post_contents\"\n                :isError=\"!!refState.error_message.post_contents\"\n                :isTextarea=\"true\"\n              >\n              </InputColumn>\n              <ErrorMessageLabel\n                v-model:errorMessage=\"refState.error_message.post_contents\"\n              ></ErrorMessageLabel>\n            </td>\n          </tr>\n          <tr>\n            <th>画像</th>\n            <td>\n              <InputColumn\n                v-model:value=\"refState.post.post_image\"\n                :isError=\"!!refState.error_message.post_image\"\n                :isTextarea=\"true\"\n              ></InputColumn>\n              <ErrorMessageLabel\n                v-model:errorMessage=\"refState.error_message.post_image\"\n              ></ErrorMessageLabel>\n            </td>\n          </tr>\n          <tr>\n            <th>削除</th>\n            <td>\n              <div class=\"form-check form-switch\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"flexSwitchCheckDefault\"\n                  v-model=\"refState.post.is_delete\"\n                />\n              </div>\n            </td>\n          </tr>\n          <tr v-if=\"refState.isUpdate\">\n            <th>登録日</th>\n            <td class=\"align-middle\">{{ refState.post.created_at }}</td>\n          </tr>\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"createUser\"\n        v-if=\"!refState.isUpdate\"\n      >\n        登録\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"updateUser\"\n        v-if=\"refState.isUpdate\"\n      >\n        更新\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary create-user-btn\"\n        @click=\"transitionPostList\"\n      >\n        キャンセル\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\n\nimport { defineComponent, reactive, onMounted, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { Post } from \"@/types/Post\";\nimport {\n  lengthCheck,\n  requireCheck,\n  determineAssignValue,\n} from \"@/composables/validationCheck\";\nimport SuggestInput from \"@/components/SuggestInput.vue\";\nimport ErrorMessageLabel from \"@/components/adminPage/common/errorLabel.vue\";\nimport InputColumn from \"@/components/adminPage/common/inputColumn.vue\";\n\ninterface ExtendPost extends Post {\n  unique_user_id: string;\n}\n\ninterface ErrorMessage {\n  user: string;\n  post_image: string;\n  post_contents: string;\n}\n\ninterface State {\n  post: ExtendPost;\n  error_message: ErrorMessage;\n  isUpdate: boolean;\n  isNotInit: boolean;\n}\n\nexport default defineComponent({\n  components: {\n    SuggestInput: SuggestInput,\n    ErrorMessageLabel: ErrorMessageLabel,\n    InputColumn: InputColumn,\n  },\n\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const router = useRouter();\n\n    const initErrorMessage: ErrorMessage = {\n      user: \"\",\n      post_image: \"\",\n      post_contents: \"\",\n    };\n\n    const refState = reactive<State>({\n      post: {\n        id: 0,\n        user_id: 0,\n        unique_user_id: \"\",\n        post_contents: \"\",\n        post_image: \"\",\n        is_delete: false,\n        created_at: \"\",\n      },\n      error_message: {\n        user: \"\",\n        post_image: \"\",\n        post_contents: \"\",\n      },\n      isUpdate: false,\n      isNotInit: false,\n    });\n\n    //SuggestInputの引数に渡すユーザー名リストを取得\n    const getUserIdList = () => {\n      const oReq = new XMLHttpRequest();\n      oReq.open(\"GET\", \"http://localhost:3000/userIdList/\", false);\n      oReq.send();\n      return oReq.response;\n    };\n\n    const stringToArray = (convertTarget: string) => {\n      let arrayText = convertTarget.slice(1, convertTarget.length - 1);\n      let re = new RegExp('\\\\\"', \"g\");\n\n      arrayText = arrayText.replaceAll(re, \"\");\n      return arrayText.split(\",\");\n    };\n\n    //レスポンスが文字列になっているので、分割して配列にする必要がある\n    const userIdList = stringToArray(getUserIdList());\n\n    //ユーザー情報取得\n    onMounted(async () => {\n      refState.isUpdate = !!Number(props.id);\n      if (refState.isUpdate) {\n        const result = await axios.get(\n          \"http://localhost:3000/posts/\" + props.id\n        );\n        refState.post = result.data[0];\n        refState.post.created_at = formatDate(refState.post.created_at);\n      }\n    });\n\n    //ユーザー新規登録\n    const createUser = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      if (frontValidationCheck()) {\n        await axios\n          .post(\"http://localhost:3000/posts/\", {\n            post: refState.post,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionPostList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            refState.error_message.user = hasProperty(\n              error.response.data,\n              \"user\"\n            )\n              ? error.response.data.user[0]\n              : \"\";\n\n            refState.error_message.post_image = hasProperty(\n              error.response.data,\n              \"post_image\"\n            )\n              ? error.response.data.post_image[0]\n              : \"\";\n\n            refState.error_message.post_contents = hasProperty(\n              error.response.data,\n              \"post_contents\"\n            )\n              ? error.response.data.post_contents[0]\n              : \"\";\n\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    //ユーザー更新\n    const updateUser = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      //バリデーションチェックが問題なければ更新処理に進む\n      if (frontValidationCheck()) {\n        //更新処理をapiに投げる\n        await axios\n          .patch(\"http://localhost:3000/posts/\" + props.id, {\n            post: refState.post,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionPostList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            refState.error_message.user = hasProperty(\n              error.response.data,\n              \"user\"\n            )\n              ? error.response.data.user[0]\n              : \"\";\n\n            refState.error_message.post_image = hasProperty(\n              error.response.data,\n              \"post_image\"\n            )\n              ? error.response.data.post_image[0]\n              : \"\";\n\n            refState.error_message.post_contents = hasProperty(\n              error.response.data,\n              \"post_contents\"\n            )\n              ? error.response.data.post_contents[0]\n              : \"\";\n\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    const frontValidationCheck = (): boolean => {\n      return (\n        !!refState.error_message.user ||\n        !!refState.error_message.post_image ||\n        !!refState.error_message.post_contents\n      );\n    };\n\n    watch(\n      () => refState.post.unique_user_id,\n      () => {\n        const lengthCheckResult = lengthCheck(refState.post.unique_user_id, 45);\n        const requireCheckResult = requireCheck(refState.post.unique_user_id);\n        refState.error_message.user = determineAssignValue(\n          lengthCheckResult,\n          requireCheckResult\n        );\n      }\n    );\n\n    watch(\n      () => refState.post.post_contents,\n      () => {\n        refState.error_message.post_contents = lengthCheck(\n          refState.post.post_contents,\n          120\n        );\n      }\n    );\n\n    watch(\n      () => refState.post.post_image,\n      () => {\n        refState.error_message.post_image = lengthCheck(\n          refState.post.post_image,\n          1000\n        );\n      }\n    );\n\n    const formatDate = (strDate: string) => {\n      return dayjs(strDate).format(\"YYYY/MM/DD hh:mm:ss\");\n    };\n\n    const judgeDisplay = (displayText: string) => {\n      const isDisplay = !!displayText;\n      return !isDisplay;\n    };\n\n    const isInvalid = (errorMesssage: string) => {\n      return !!errorMesssage;\n    };\n\n    const hasProperty = (obj: any, key: string) => {\n      return Object.prototype.hasOwnProperty.call(obj, key);\n    };\n\n    //一覧画面に遷移\n    const transitionPostList = () => {\n      router.push({\n        name: \"PostList\",\n      });\n    };\n\n    return {\n      refState,\n      judgeDisplay,\n      isInvalid,\n      transitionPostList,\n      createUser,\n      updateUser,\n      userIdList,\n    };\n  },\n});\n</script>\n\n<style scoped>\nbutton {\n  width: 150px;\n  margin-top: 30px;\n  margin-bottom: 100px;\n  margin-right: 50px;\n}\n\n.table th {\n  width: 15%;\n  padding: 10px 40px;\n  border-style: none;\n}\n\n.table td {\n  border-style: none;\n}\n\n.birthday-form {\n  width: 160px;\n  padding: 6px 12px;\n}\n\n.birthday-form input {\n  border: none;\n  text-align: right;\n}\n\n.input-year {\n  width: 50px;\n  text-align: right;\n}\n\n.input-month {\n  width: 25px;\n  text-align: right;\n}\n\n.input-day {\n  width: 25px;\n  text-align: right;\n}\n\n.inline {\n  display: inline;\n}\n</style>\n"]}]}