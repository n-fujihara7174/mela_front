{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/common/molecules/PageNation.vue?vue&type=style&index=0&id=0fd843ab&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","mtime":1645705991853},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZWxlY3QtcGFnZS1saW5rIHsKICBjb2xvcjogIzBhNThjYTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOwogIGJvcmRlci1jb2xvcjogI2RlZTJlNjsKfQo="},{"version":3,"sources":["/app/app/src/components/adminPage/common/molecules/PageNation.vue"],"names":[],"mappings":";AA4KA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <nav aria-label=\"Page navigation example\">\n      <ul class=\"pagination\">\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        <li\n          v-for=\"(element, index) in refState.pageNumberList\"\n          :key=\"index\"\n          class=\"page-item\"\n        >\n          <span\n            class=\"page-link\"\n            :class=\"{\n              '.select-page-link': element === refState.NumberOfSelectPage,\n            }\"\n            @click=\"selectPage(element)\"\n            >{{ element }}\n          </span>\n        </li>\n        <!-- <span\n          v-show=\"\n            pageOfNumber !==\n            refState.pageNumberList[refState.pageNumberList.length - 1]\n          \"\n        >\n          <li class=\"page-item\">\n            <span class=\"page-link\">... </span>\n          </li>\n          <li class=\"page-item\">\n            <span\n              class=\"page-link\"\n              @click=\"\n                selectPage(\n                  refState.pageNumberList[refState.pageNumberList.length - 1]\n                )\n              \"\n              >{{ pageOfNumber }}\n            </span>\n          </li>\n        </span> -->\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, reactive } from \"vue\";\n\ninterface State {\n  pageNumberList: number[];\n  currentPageNumber: number;\n  NumberOfSelectPage: number;\n}\n\nexport default defineComponent({\n  props: {\n    listLength: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    numberOfDisplayOnOnePage: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    numberOfDisplayOnOneTimeForPage: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    startIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    endIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n  },\n\n  setup(props, { emit }) {\n    const refState = reactive<State>({\n      pageNumberList: [],\n      currentPageNumber: 1,\n      NumberOfSelectPage: 1,\n    });\n\n    //総ページ数\n    const pageOfNumber = props.listLength / props.numberOfDisplayOnOnePage;\n\n    /* **********************************************************************************\n    最初に表示するページ番号を算出\n    ********************************************************************************** */\n    const calculationStartPageNumber = (selectPage: number): number => {\n      //ページを選択した際に選択したページが中央になるように最初のページ番号を算出\n      const startPageNumber =\n        selectPage - props.numberOfDisplayOnOneTimeForPage / 2;\n\n      //中央になるように引き算した場合、ページ番号がマイナスになるか？\n      if (startPageNumber < 1 || isNaN(startPageNumber)) {\n        //1ページ目を返却\n        return 1;\n      } else {\n        //算出されたページ番号を返却\n        return startPageNumber;\n      }\n    };\n\n    /* **********************************************************************************\n    要素数 / 一ページに表示するレコードの数 で除算しページ数を算出\n    算出したページ数分、配列に要素を追加\n    ********************************************************************************** */\n    const calculationPageNumber = (selectPage = 1) => {\n      //配列をクリア\n      refState.pageNumberList = [];\n\n      let loopCounter = 0;\n      let displayStartPageNumber = 0;\n\n      //ページ数が一度に表示するページ数より小さいか？\n      if (pageOfNumber < props.numberOfDisplayOnOneTimeForPage) {\n        //表示するページの個数を全体のページ数と同じにする\n        loopCounter = pageOfNumber;\n        //最初に表示するページ番号を1にセット\n        displayStartPageNumber = 1;\n      } else {\n        loopCounter = 5;\n        //最初に表示するページ番号をセット\n        displayStartPageNumber = calculationStartPageNumber(selectPage);\n      }\n\n      console.log(calculationStartPageNumber(selectPage));\n      console.log(\"loopCounter : \" + loopCounter);\n      console.log(\"displayStart.. : \" + displayStartPageNumber);\n      //ページを追加\n      for (let i = displayStartPageNumber; i <= loopCounter; i++) {\n        refState.pageNumberList.push(i);\n      }\n    };\n\n    calculationPageNumber();\n    console.log(refState.pageNumberList);\n\n    /* **********************************************************************************\n    ページを選択した際の処理\n    ********************************************************************************** */\n    const selectPage = (element: number) => {\n      refState.NumberOfSelectPage = element;\n      calculationPageNumber();\n\n      //選択したページの要素の先頭のインデックスを親に渡す\n      emit(\n        \"update:startIndex\",\n        (element - 1) * props.numberOfDisplayOnOnePage + 1\n      );\n\n      //選択したページの要素の最後のインデックスを親に渡す\n      emit(\"update:endIndex\", element * props.numberOfDisplayOnOnePage);\n    };\n\n    return { refState, pageOfNumber, selectPage };\n  },\n});\n</script>\n<style scoped>\n.select-page-link {\n  color: #0a58ca;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n</style>\n"]}]}