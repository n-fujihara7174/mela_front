{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/common/molecules/PageNation.vue?vue&type=style&index=0&id=0fd843ab&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","mtime":1646135354890},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZWxlY3QtcGFnZS1saW5rIHsKICBjb2xvcjogIzBhNThjYTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOwogIGJvcmRlci1jb2xvcjogI2RlZTJlNjsKfQo="},{"version":3,"sources":["/app/app/src/components/adminPage/common/molecules/PageNation.vue"],"names":[],"mappings":";AA6NA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","sourceRoot":"","sourcesContent":["<template>\n  <div v-show=\"judgeDisplayPageNation\">\n    <nav aria-label=\"Page navigation example\">\n      <ul class=\"pagination\">\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        <li\n          v-for=\"(element, index) in refState.pageNumberList\"\n          :key=\"index\"\n          class=\"page-item\"\n        >\n          <span\n            class=\"page-link\"\n            :class=\"{\n              'select-page-link': element === refState.numberOfSelectPage,\n            }\"\n            @click=\"selectPage(element)\"\n            >{{ element }}\n          </span>\n        </li>\n        <li class=\"page-item\" v-show=\"judgeDisplayLastPageNumber\">\n          <span class=\"ellipsis\">...</span>\n        </li>\n        <li class=\"page-item\" v-show=\"judgeDisplayLastPageNumber\">\n          <span\n            class=\"page-link\"\n            @click=\"\n              selectPage(\n                refState.pageNumberList[refState.pageNumberList.length - 1]\n              )\n            \"\n            >{{ refState.pageOfNumber }}\n          </span>\n        </li>\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  PropType,\n  reactive,\n  watchEffect,\n  computed,\n} from \"vue\";\n\ninterface State {\n  pageNumberList: number[];\n  currentPageNumber: number;\n  numberOfSelectPage: number;\n  pageOfNumber: number;\n}\n\nexport default defineComponent({\n  props: {\n    listLength: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    startIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    endIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n  },\n\n  setup(props, { emit }) {\n    const refState = reactive<State>({\n      pageNumberList: [],\n      currentPageNumber: 1,\n      numberOfSelectPage: 1,\n      pageOfNumber: 0,\n    });\n\n    const numberOfDisplayOnOnePage = 50;\n    const numberOfDisplayOnOneTimeForPage = 5;\n\n    /* **********************************************************************************\n    ページ数を算出\n    ********************************************************************************** */\n    //総ページ数\n    refState.pageOfNumber = props.listLength / numberOfDisplayOnOnePage;\n\n    /* **********************************************************************************\n    最初に表示するページ番号を算出\n    ********************************************************************************** */\n    const calculationStartPageNumber = (selectPage: number): number => {\n      //ページを選択した際に選択したページが中央になるように最初のページ番号を算出\n      let startPageNumber = selectPage - numberOfDisplayOnOneTimeForPage / 2;\n      startPageNumber = Math.ceil(startPageNumber);\n\n      //中央になるように引き算した場合、ページ番号がマイナスになるか？\n      if (startPageNumber < 1 || isNaN(startPageNumber)) {\n        //1ページ目を返却\n        return 1;\n      } else {\n        //算出されたページ番号を返却\n        return startPageNumber;\n      }\n    };\n\n    /* **********************************************************************************\n    要素数 / 一ページに表示するレコードの数 で除算しページ数を算出\n    算出したページ数分、配列に要素を追加\n    最後のページのページ番号を表示するかどうか判定\n    ********************************************************************************** */\n    const calculationPageNumber = (selectPage = 1) => {\n      //配列をクリア\n      refState.pageNumberList = [];\n\n      let loopCounter = 0;\n      let displayStartPageNumber = 0;\n\n      //ページ数が一度に表示するページ数より小さいか？\n      if (refState.pageOfNumber < numberOfDisplayOnOneTimeForPage) {\n        //表示するページの個数を全体のページ数と同じにする\n        loopCounter = refState.pageOfNumber;\n\n        //最初に表示するページ番号を1にセット\n        displayStartPageNumber = 1;\n      } else {\n        //最初に表示するページ番号をセット\n        displayStartPageNumber = calculationStartPageNumber(selectPage);\n\n        /*\n        最後のページもしくは最後のページの1つ前か2つ前のページが選択されたか？\n        上記のページは表示するページ番号が変わらないので、別途判定が必要\n        */\n        if (refState.pageOfNumber - selectPage < 3) {\n          loopCounter = refState.pageOfNumber;\n          console.log(\"refState.pageOfNumber : \" + refState.pageOfNumber);\n          console.log(\"displayStartPageNumber : \" + displayStartPageNumber);\n          /*\n          表示するページ番号の範囲は「選択したページの2つ前のページ 〜 選択したページの2つ後のページを表示する\n          しかし、1ページ目と2ページ目、最後のページと最後のページから一つ前のページは、前後二つのページが存在しない\n          そのため、それらのページの場合は現在表示しているページを変更しない\n          以下式の解説\n          表示を開始するページ番号 + (最後のページの番号 - 表示を開始するページ - 最後もしくは最初のページを除く表示するページ数)\n          1.「最後のページの番号 - 表示を開始するページ」をすることによって表示するページ数が5つを超えているか、少ないかがわかる\n          2. 1.の値から「最後もしくは最初のページを除く表示するページ数」で引くことによって\n             「表示するページ数より多い又は、少ないページの数」がわかる\n          3. 2.で出した「多い又は、少ないページの数」を現在の「表示を開始するページ番号」に足すことによって、表示ページ数を5つに調整できる\n          */\n          displayStartPageNumber =\n            displayStartPageNumber +\n            (refState.pageOfNumber - displayStartPageNumber - 4);\n        } else {\n          loopCounter = displayStartPageNumber + 4;\n        }\n      }\n\n      //ページを追加\n      for (let i = displayStartPageNumber; i <= loopCounter; i++) {\n        refState.pageNumberList.push(i);\n      }\n    };\n\n    calculationPageNumber();\n\n    /* **********************************************************************************\n    ページを選択した際の処理\n    ********************************************************************************** */\n    const selectPage = (element: number) => {\n      refState.numberOfSelectPage = element;\n      calculationPageNumber(element);\n\n      //選択したページの要素の先頭のインデックスを親に渡す  ※配列のインデックスは0からスタートなので、+1しなくても問題ない\n      emit(\"update:startIndex\", (element - 1) * numberOfDisplayOnOnePage);\n\n      //選択したページの要素の最後のインデックスを親に渡す  ※配列のインデックスは0からスタートなので、+1しなくても問題ない\n      emit(\"update:endIndex\", element * numberOfDisplayOnOnePage);\n    };\n\n    /* **********************************************************************************\n    ページ数を算出\n    ********************************************************************************** */\n    watchEffect(() => {\n      refState.pageOfNumber = props.listLength / numberOfDisplayOnOnePage;\n    });\n\n    /* **********************************************************************************\n    ページネーションを表示するか判定\n    ********************************************************************************** */\n    const judgeDisplayPageNation = computed(() => {\n      return refState.pageOfNumber > 1;\n    });\n\n    /* **********************************************************************************\n    最後のページを表示するか判定\n    ********************************************************************************** */\n    const judgeDisplayLastPageNumber = computed(() => {\n      return (\n        refState.pageOfNumber !==\n          refState.pageNumberList[refState.pageNumberList.length - 1] &&\n        refState.pageOfNumber > 5\n      );\n    });\n\n    return {\n      refState,\n      selectPage,\n      judgeDisplayPageNation,\n      judgeDisplayLastPageNumber,\n    };\n  },\n});\n</script>\n<style scoped>\n.select-page-link {\n  color: #0a58ca;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n</style>\n"]}]}