{"remainingRequest":"/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/common/molecules/PageNation.vue?vue&type=style&index=0&id=0fd843ab&scoped=true&lang=css","dependencies":[{"path":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","mtime":1645483918913},{"path":"/app/app/node_modules/css-loader/dist/cjs.js","mtime":1639906765242},{"path":"/app/app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639906773228},{"path":"/app/app/node_modules/postcss-loader/src/index.js","mtime":1639906767500},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1639906761392},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1639906767487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZWxlY3QtcGFnZS1saW5rIHsKICBjb2xvcjogIzBhNThjYTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOwogIGJvcmRlci1jb2xvcjogI2RlZTJlNjsKfQo="},{"version":3,"sources":["/app/app/src/components/adminPage/common/molecules/PageNation.vue"],"names":[],"mappings":";AA+GA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/app/app/src/components/adminPage/common/molecules/PageNation.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <nav aria-label=\"Page navigation example\">\n      <ul class=\"pagination\">\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\n            <span aria-hidden=\"true\">&laquo;</span>\n          </a>\n        </li>\n        <li\n          v-for=\"(element, index) in refState.pageNumberList\"\n          :key=\"index\"\n          class=\"page-item\"\n        >\n          <span\n            class=\"page-link\"\n            :class=\"{\n              '.select-page-link': (element = refState.NumberOfSelectPage),\n            }\"\n            @click=\"selectPage(element)\"\n            >{{ element }}</span\n          >\n        </li>\n        <li class=\"page-item\">\n          <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&raquo;</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, reactive, emit } from \"vue\";\n\ninterface State {\n  pageNumberList: number[];\n  currentPageNumber: number;\n  NumberOfSelectPage: number;\n}\n\nexport default defineComponent({\n  props: {\n    listLength: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    NumberOfDisplayOnOnePage: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    NumberOfDisplayOnOneTimeForPage: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    startIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n    endIndex: {\n      type: Number as PropType<number>,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const refState = reactive<State>({\n      pageNumberList: [],\n      currentPageNumber: 1,\n      NumberOfSelectPage: 1,\n    });\n\n    /* **********************************************************************************\n    1ページに表示するレコード数を取得\n    ********************************************************************************** */\n    const getNumberOfDisplayOnOnePage = () => {\n      return props.NumberOfDisplayOnOnePage;\n    };\n\n    const ConNumberOfDisplayOnOnePage = getNumberOfDisplayOnOnePage();\n\n    /* **********************************************************************************\n    要素数 / 一ページに表示するレコードの数 で除算しページ数を算出\n    算出したページ数分、配列に要素を追加\n    ********************************************************************************** */\n    const calculationPageNumber = () => {\n      const pageOfNumber = props.listLength / ConNumberOfDisplayOnOnePage;\n\n      //配列をクリア\n      refState.pageNumberList = [];\n      //ページを追加\n      for (let i = 0; i <= pageOfNumber; i++) {\n        refState.pageNumberList.push(i);\n      }\n    };\n\n    calculationPageNumber();\n\n    const selectPage = (element) => {\n      refState.NumberOfSelectPage = element;\n      //選択したページの先頭のインデックスを取得\n      emit(\"update:startIndex\", (element - 1) * 50 + 1);\n      emit(\"update:startIndex\", (element - 1) * 50 + 1);\n    };\n\n    return { refState, selectPage };\n  },\n});\n</script>\n<style scoped>\n.select-page-link {\n  color: #0a58ca;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n</style>\n"]}]}