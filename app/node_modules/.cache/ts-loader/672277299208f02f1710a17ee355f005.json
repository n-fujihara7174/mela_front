{"remainingRequest":"/app/app/node_modules/babel-loader/lib/index.js!/app/app/node_modules/ts-loader/index.js??ref--15-2!/app/app/node_modules/cache-loader/dist/cjs.js??ref--1-0!/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/post/PostEdit.vue?vue&type=script&lang=ts","dependencies":[{"path":"/app/app/src/components/adminPage/post/PostEdit.vue","mtime":1647259093179},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1648218240323},{"path":"/app/app/node_modules/babel-loader/lib/index.js","mtime":1648218249787},{"path":"/app/app/node_modules/ts-loader/index.js","mtime":1648218251153},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1648218240323},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1648218248547},{"path":"/app/app/babel.config.js","mtime":1643593581402},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1648218240323},{"path":"/app/app/node_modules/babel-loader/lib/index.js","mtime":1648218249787},{"path":"/app/app/node_modules/ts-loader/index.js","mtime":1648218251153},{"path":"/app/app/node_modules/cache-loader/dist/cjs.js","mtime":1648218240323},{"path":"/app/app/node_modules/vue-loader-v16/dist/index.js","mtime":1648218248547}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["axios","dayjs","defineComponent","reactive","watch","useRouter","lengthCheck","requireCheck","determineAssignValue","InputField","components","props","id","type","String","required","setup","router","initErrorMessage","user","post_image","post_contents","refState","post","user_id","users_table_user_id","is_delete","created_at","error_message","isUpdate","isNotInit","getUserIdList","oReq","XMLHttpRequest","open","send","response","stringToArray","convertTarget","arrayText","slice","length","re","RegExp","replaceAll","split","userIdList","formatDate","strDate","format","getPostById","JSON","parse","Number","postObject","createPost","__awaiter","Object","assign","frontValidationCheck","then","transitionPostList","catch","error","data","updatePost","patch","lengthCheckResult","requireCheckResult","isInvalid","errorMesssage","push","name"],"sourceRoot":"","sources":["/app/app/node_modules/cache-loader/dist/cjs.js??ref--1-0!/app/app/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/app/app/src/components/adminPage/post/PostEdit.vue?vue&type=script&lang=ts"],"sourcesContent":["\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\n\nimport { defineComponent, reactive, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { Post } from \"@/types/Post\";\nimport {\n  lengthCheck,\n  requireCheck,\n  determineAssignValue,\n} from \"@/composables/validationCheck\";\nimport InputField from \"@/components/common/molecules/InputField.vue\";\n\n/* ***********************************************************************************\nPost型にusers.user_idを格納するプロパティを追加\n*********************************************************************************** */\ninterface ExtendPost extends Post {\n  users_table_user_id: string;\n}\n\n/* ***********************************************************************************\nエラーメッセージを格納するオブジェクトの型を定義\n*********************************************************************************** */\ninterface ErrorMessage {\n  user: string;\n  post_image: string;\n  post_contents: string;\n}\n\n/* ***********************************************************************************\n本モジュール全体で使用する変数の定義\n*********************************************************************************** */\ninterface State {\n  post: ExtendPost;\n  error_message: ErrorMessage;\n  isUpdate: boolean;\n  isNotInit: boolean;\n}\n\n/* ***********************************************************************************\n引数定義\n状態を保持する変数を定義\n*********************************************************************************** */\nexport default defineComponent({\n  components: {\n    InputField: InputField,\n  },\n\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const router = useRouter();\n\n    const initErrorMessage: ErrorMessage = {\n      user: \"\",\n      post_image: \"\",\n      post_contents: \"\",\n    };\n\n    const refState = reactive<State>({\n      post: {\n        id: 0,\n        user_id: 0,\n        users_table_user_id: \"\",\n        post_contents: \"\",\n        post_image: \"\",\n        is_delete: false,\n        created_at: \"\",\n      },\n      error_message: {\n        user: \"\",\n        post_image: \"\",\n        post_contents: \"\",\n      },\n      isUpdate: false,\n      isNotInit: false,\n    });\n\n    /* ***********************************************************************************\n    サジェスト入力用のリストを取得する\n    *********************************************************************************** */\n    //SuggestInputの引数に渡すユーザー名リストを取得\n    const getUserIdList = () => {\n      const oReq = new XMLHttpRequest();\n      oReq.open(\"GET\", \"http://localhost:3000/userIdList/\", false);\n      oReq.send();\n      return oReq.response;\n    };\n\n    //getUserIdListの取得結果を文字列から配列に変換\n    const stringToArray = (convertTarget: string) => {\n      let arrayText = convertTarget.slice(1, convertTarget.length - 1);\n      let re = new RegExp('\\\\\"', \"g\");\n\n      arrayText = arrayText.replaceAll(re, \"\");\n      return arrayText.split(\",\");\n    };\n\n    //ユーザーIDリストのレスポンスが文字列になっているので、分割して配列にする必要がある\n    const userIdList = stringToArray(getUserIdList());\n\n    /* ***********************************************************************************\n    選択したレコードの情報を取得\n    *********************************************************************************** */\n    //日付をフォーマットする\n    const formatDate = (strDate: string) => {\n      return dayjs(strDate).format(\"YYYY/MM/DD hh:mm:ss\");\n    };\n\n    //投稿データをposts.idで取得する\n    //子コンポーネントに値を渡すために同期処理で取得\n    const getPostById = () => {\n      const oReq = new XMLHttpRequest();\n      oReq.open(\"GET\", \"http://localhost:3000/posts/\" + props.id, false);\n      oReq.send();\n      return JSON.parse(oReq.response);\n    };\n\n    //ユーザー情報取得\n    refState.isUpdate = !!Number(props.id);\n    if (refState.isUpdate) {\n      const postObject = getPostById();\n      refState.post = postObject[0];\n    }\n\n    /* ***********************************************************************************\n      投稿情報 登録処理\n    *********************************************************************************** */\n    const createPost = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      if (frontValidationCheck()) {\n        await axios\n          .post(\"http://localhost:3000/posts/\", {\n            post: refState.post,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionPostList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            refState.error_message = error.response.data;\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    /* ***********************************************************************************\n      投稿情報 更新処理\n    *********************************************************************************** */\n    const updatePost = async () => {\n      //エラーメッセージをクリア\n      Object.assign(refState.error_message, reactive(initErrorMessage));\n\n      //バリデーションチェックが問題なければ更新処理に進む\n      if (frontValidationCheck()) {\n        //更新処理をapiに投げる\n        await axios\n          .patch(\"http://localhost:3000/posts/\" + props.id, {\n            post: refState.post,\n          })\n          .then(() => {\n            //一覧画面に遷移\n            transitionPostList();\n          })\n          .catch((error) => {\n            //エラーメッセージを格納\n            refState.error_message = error.response.data;\n            refState.isNotInit = true;\n          });\n      }\n    };\n\n    /* ***********************************************************************************\n      バリデーション\n    *********************************************************************************** */\n    //全てのバリデーションが問題ないかチェック\n    const frontValidationCheck = (): boolean => {\n      return !(\n        !!refState.error_message.user ||\n        !!refState.error_message.post_image ||\n        !!refState.error_message.post_contents\n      );\n    };\n\n    //ユーザーIDのバリデーション\n    watch(\n      () => refState.post.users_table_user_id,\n      () => {\n        const lengthCheckResult = lengthCheck(\n          refState.post.users_table_user_id,\n          45\n        );\n        const requireCheckResult = requireCheck(\n          refState.post.users_table_user_id\n        );\n        refState.error_message.user = determineAssignValue(\n          lengthCheckResult,\n          requireCheckResult\n        );\n      }\n    );\n\n    //投稿内容のバリデーション\n    watch(\n      () => refState.post.post_contents,\n      () => {\n        refState.error_message.post_contents = lengthCheck(\n          refState.post.post_contents,\n          120\n        );\n      }\n    );\n\n    //投稿画像のバリデーション\n    watch(\n      () => refState.post.post_image,\n      () => {\n        refState.error_message.post_image = lengthCheck(\n          refState.post.post_image,\n          1000\n        );\n      }\n    );\n\n    /* ***********************************************************************************\n\n    *********************************************************************************** */\n    const isInvalid = (errorMesssage: string) => {\n      return !!errorMesssage;\n    };\n\n    //一覧画面に遷移\n    const transitionPostList = () => {\n      router.push({\n        name: \"PostList\",\n      });\n    };\n\n    return {\n      refState,\n      formatDate,\n      isInvalid,\n      transitionPostList,\n      createPost,\n      updatePost,\n      userIdList,\n      frontValidationCheck,\n    };\n  },\n});\n"]}]}